const express = require("express");
const axios = require("axios");
const cors = require("cors");
require("dotenv").config();

const app = express();
const PORT = 5000;

// --- ุจุฏุงูุฉ ุงูุชุนุฏูู ---

// ูุงุฆูุฉ ุจุงููุทุงูุงุช ุงููุณููุญ ููุง ุจุงููุตูู
// ุฃุถู ุฑุงุจุท ุงููุงุฌูุฉ ุงูุฃูุงููุฉ ุจุนุฏ ูุดุฑูุง ุฃูุถุงู
const allowedOrigins = [
    'http://localhost:8080', // ููุณูุงุญ ุจุงููุตูู ุฃุซูุงุก ุงูุชุทููุฑ ุงููุญูู
    // 'https://your-frontend-domain.vercel.app' // ุฃุถู ุฑุงุจุท ุงููุฑููุช ุฅูุฏ ููุง ุจุนุฏ ุฑูุนู
];

const corsOptions = {
    origin: function (origin, callback) {
        // ูู ุญุงูุฉ ุงูุทูุจุงุช ูู ููุณ ุงูุณูุฑูุฑ (ูุซู Postman) ุฃู ุนุฏู ูุฌูุฏ originุ ูุชู ุงูุณูุงุญ ุจูุง
        if (!origin || allowedOrigins.indexOf(origin) !== -1) {
            callback(null, true);
        } else {
            callback(new Error('Not allowed by CORS'));
        }
    },
    methods: ['GET', 'POST', 'PUT', 'DELETE'], // ุชุญุฏูุฏ ุงูู methods ุงููุณููุญ ุจูุง
    allowedHeaders: ['Content-Type', 'Authorization'], // ุชุญุฏูุฏ ุงูู headers ุงููุณููุญ ุจูุง
};

// ุงุณุชุฎุฏู ุฅุนุฏุงุฏุงุช CORS ุงููุฎุตุตุฉ
app.use(cors(corsOptions));
// ุชุฃูุฏ ูู ุฃู Express ูุชุนุงูู ูุน ุทูุจุงุช OPTIONS preflight ุจุดูู ุตุญูุญ
app.options('*', cors(corsOptions));

// --- ููุงูุฉ ุงูุชุนุฏูู ---


app.use(express.json());

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

app.post("/ask", async (req, res) => {
    const userQuestion = req.body.question;

    if (!userQuestion) {
        return res.status(400).json({ error: "ูุฌุจ ุฅุฑุณุงู ุณุคุงู" });
    }

    try {
        const response = await axios.post(
            `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
            {
                contents: [{
                    parts: [{ text: userQuestion }]
                }]
            },
            { headers: { "Content-Type": "application/json" } }
        );

        console.log("๐ฉ ุทูุจ ูุฑุณู ุฅูู Gemini:", userQuestion);
        console.log("๐ฅ ุงุณุชุฌุงุจุฉ API:", response.data);

        if (response.data && response.data.candidates && response.data.candidates.length > 0) {
            res.json({ answer: response.data.candidates[0].content.parts[0].text });
        } else {
            res.status(500).json({ error: "ูู ูุชู ุงูุนุซูุฑ ุนูู ุฑุฏ ูู Gemini" });
        }

    } catch (error) {
        console.error("โ ุฎุทุฃ ุฃุซูุงุก ุงูุงุชุตุงู ุจู Gemini API:", error.response ? error.response.data : error.message);
        res.status(500).json({ error: "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ุงูุฑุฏ" });
    }
});

app.listen(PORT, () => {
    console.log(`๐ ุงูุณูุฑูุฑ ูุนูู ุนูู: http://localhost:${PORT}`);
});
